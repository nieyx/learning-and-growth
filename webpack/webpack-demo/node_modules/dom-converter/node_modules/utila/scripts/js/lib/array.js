(function() {
  var array;

  module.exports = array = {

    /*
    	Tries to turn anything into an array.
     */
    from: function(r) {
      return Array.prototype.slice.call(r);
    },

    /*
    	Clone of an array. Properties will be shallow copies.
     */
    simpleClone: function(a) {
      return a.slice(0);
    },
    shallowEqual: function(a1, a2) {
      var i, j, len1, val;
      if (!(Array.isArray(a1) && Array.isArray(a2) && a1.length === a2.length)) {
        return false;
      }
      for (i = j = 0, len1 = a1.length; j < len1; i = ++j) {
        val = a1[i];
        if (a2[i] !== val) {
          return false;
        }
      }
      return true;
    },
    pluck: function(a, i) {
      var index, j, len1, value;
      if (a.length < 1) {
        return a;
      }
      for (index = j = 0, len1 = a.length; j < len1; index = ++j) {
        value = a[index];
        if (index > i) {
          a[index - 1] = a[index];
        }
      }
      a.length = a.length - 1;
      return a;
    },
    pluckItem: function(a, item) {
      var index, j, len1, removed, value;
      if (a.length < 1) {
        return a;
      }
      removed = 0;
      for (index = j = 0, len1 = a.length; j < len1; index = ++j) {
        value = a[index];
        if (value === item) {
          removed++;
          continue;
        }
        if (removed !== 0) {
          a[index - removed] = a[index];
        }
      }
      if (removed > 0) {
        a.length = a.length - removed;
      }
      return a;
    },
    pluckOneItem: function(a, item) {
      var index, j, len1, reached, value;
      if (a.length < 1) {
        return a;
      }
      reached = false;
      for (index = j = 0, len1 = a.length; j < len1; index = ++j) {
        value = a[index];
        if (!reached) {
          if (value === item) {
            reached = true;
            continue;
          }
        } else {
          a[index - 1] = a[index];
        }
      }
      if (reached) {
        a.length = a.length - 1;
      }
      return a;
    },
    pluckByCallback: function(a, cb) {
      var index, j, len1, removed, value;
      if (a.length < 1) {
        return a;
      }
      removed = 0;
      for (index = j = 0, len1 = a.length; j < len1; index = ++j) {
        value = a[index];
        if (cb(value, index)) {
          removed++;
          continue;
        }
        if (removed !== 0) {
          a[index - removed] = a[index];
        }
      }
      if (removed > 0) {
        a.length = a.length - removed;
      }
      return a;
    },
    pluckMultiple: function(array, indexesToRemove) {
      var i, j, len1, removedSoFar;
      if (array.length < 1) {
        return array;
      }
      removedSoFar = 0;
      indexesToRemove.sort();
      for (j = 0, len1 = indexesToRemove.length; j < len1; j++) {
        i = indexesToRemove[j];
        this.pluck(array, i - removedSoFar);
        removedSoFar++;
      }
      return array;
    },
    injectByCallback: function(a, toInject, shouldInject) {
      var i, j, len, len1, val, valA, valB;
      valA = null;
      valB = null;
      len = a.length;
      if (len < 1) {
        a.push(toInject);
        return a;
      }
      for (i = j = 0, len1 = a.length; j < len1; i = ++j) {
        val = a[i];
        valA = valB;
        valB = val;
        if (shouldInject(valA, valB, toInject)) {
          return a.splice(i, 0, toInject);
        }
      }
      a.push(toInject);
      return a;
    },
    injectInIndex: function(a, index, toInject) {
      var i, len, toPut, toPutNext;
      len = a.length;
      i = index;
      if (len < 1) {
        a.push(toInject);
        return a;
      }
      toPut = toInject;
      toPutNext = null;
      for(; i <= len; i++){

			toPutNext = a[i];

			a[i] = toPut;

			toPut = toPutNext;

		};
      return null;
    }
  };

}).call(this);
