(function() {
  var classic,
    slice = [].slice;

  module.exports = classic = {};

  classic.implement = function() {
    var classProto, classReference, desc, i, j, len, member, mixin, mixins;
    mixins = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), classReference = arguments[i++];
    for (j = 0, len = mixins.length; j < len; j++) {
      mixin = mixins[j];
      classProto = classReference.prototype;
      for (member in mixin.prototype) {
        if (!Object.getOwnPropertyDescriptor(classProto, member)) {
          desc = Object.getOwnPropertyDescriptor(mixin.prototype, member);
          Object.defineProperty(classProto, member, desc);
        }
      }
    }
    return classReference;
  };

  classic.mix = function() {
    var classProto, classReference, desc, i, j, len, member, mixin, mixins;
    mixins = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), classReference = arguments[i++];
    classProto = classReference.prototype;
    classReference.__mixinCloners = [];
    classReference.__applyClonersFor = function(instance, args) {
      var cloner, j, len, ref;
      if (args == null) {
        args = null;
      }
      ref = classReference.__mixinCloners;
      for (j = 0, len = ref.length; j < len; j++) {
        cloner = ref[j];
        cloner.apply(instance, args);
      }
    };
    classReference.__mixinInitializers = [];
    classReference.__initMixinsFor = function(instance, args) {
      var initializer, j, len, ref;
      if (args == null) {
        args = null;
      }
      ref = classReference.__mixinInitializers;
      for (j = 0, len = ref.length; j < len; j++) {
        initializer = ref[j];
        initializer.apply(instance, args);
      }
    };
    classReference.__mixinQuitters = [];
    classReference.__applyQuittersFor = function(instance, args) {
      var j, len, quitter, ref;
      if (args == null) {
        args = null;
      }
      ref = classReference.__mixinQuitters;
      for (j = 0, len = ref.length; j < len; j++) {
        quitter = ref[j];
        quitter.apply(instance, args);
      }
    };
    for (j = 0, len = mixins.length; j < len; j++) {
      mixin = mixins[j];
      if (!(mixin.constructor instanceof Function)) {
        throw Error("Mixin should be a function");
      }
      for (member in mixin.prototype) {
        if (member.substr(0, 11) === '__initMixin') {
          classReference.__mixinInitializers.push(mixin.prototype[member]);
          continue;
        } else if (member.substr(0, 11) === '__clonerFor') {
          classReference.__mixinCloners.push(mixin.prototype[member]);
          continue;
        } else if (member.substr(0, 12) === '__quitterFor') {
          classReference.__mixinQuitters.push(mixin.prototype[member]);
          continue;
        }
        if (!Object.getOwnPropertyDescriptor(classProto, member)) {
          desc = Object.getOwnPropertyDescriptor(mixin.prototype, member);
          Object.defineProperty(classProto, member, desc);
        }
      }
    }
    return classReference;
  };

}).call(this);
