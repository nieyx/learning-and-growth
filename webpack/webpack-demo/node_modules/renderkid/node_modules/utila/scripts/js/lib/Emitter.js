(function() {
  var Emitter, array;

  array = require('./array');

  module.exports = Emitter = (function() {
    function Emitter() {
      this._listeners = {};
      this._listenersForAnyEvent = [];
      this._disabledEmitters = {};
    }

    Emitter.prototype.on = function(eventName, listener) {
      if (this._listeners[eventName] == null) {
        this._listeners[eventName] = [];
      }
      this._listeners[eventName].push(listener);
      return this;
    };

    Emitter.prototype.once = function(eventName, listener) {
      var cb, ran;
      ran = false;
      cb = (function(_this) {
        return function() {
          if (ran) {
            return;
          }
          ran = true;
          listener();
          return setTimeout(function() {
            return _this.removeEvent(eventName, cb);
          }, 0);
        };
      })(this);
      this.on(eventName, cb);
      return this;
    };

    Emitter.prototype.onAnyEvent = function(listener) {
      this._listenersForAnyEvent.push(listener);
      return this;
    };

    Emitter.prototype.removeEvent = function(eventName, listener) {
      if (this._listeners[eventName] == null) {
        return this;
      }
      array.pluckOneItem(this._listeners[eventName], listener);
      return this;
    };

    Emitter.prototype.removeListeners = function(eventName) {
      if (this._listeners[eventName] == null) {
        return this;
      }
      this._listeners[eventName].length = 0;
      return this;
    };

    Emitter.prototype.removeAllListeners = function() {
      var listeners, name, ref;
      ref = this._listeners;
      for (name in ref) {
        listeners = ref[name];
        listeners.length = 0;
      }
      return this;
    };

    Emitter.prototype._emit = function(eventName, data) {
      var i, j, len, len1, listener, ref, ref1;
      ref = this._listenersForAnyEvent;
      for (i = 0, len = ref.length; i < len; i++) {
        listener = ref[i];
        listener.call(this, data, eventName);
      }
      if (this._listeners[eventName] == null) {
        return;
      }
      ref1 = this._listeners[eventName];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        listener = ref1[j];
        listener.call(this, data);
      }
    };

    Emitter.prototype._throttleEmitterMethod = function(fnName, time) {
      var lastCallArgs, originalFn, pend, pending, runIt, timer;
      if (time == null) {
        time = 1000;
      }
      originalFn = this[fnName];
      if (typeof originalFn !== 'function') {
        throw Error("this class does not have a method called '" + fnName + "'");
      }
      lastCallArgs = null;
      pending = false;
      timer = null;
      this[fnName] = (function(_this) {
        return function() {
          lastCallArgs = arguments;
          return pend();
        };
      })(this);
      pend = (function(_this) {
        return function() {
          if (pending) {
            clearTimeout(timer);
          }
          timer = setTimeout(runIt, time);
          return pending = true;
        };
      })(this);
      return runIt = (function(_this) {
        return function() {
          pending = false;
          return originalFn.apply(_this, lastCallArgs);
        };
      })(this);
    };

    Emitter.prototype._disableEmitter = function(fnName) {
      if (this._disabledEmitters[fnName] != null) {
        throw Error(fnName + " is already a disabled emitter");
      }
      this._disabledEmitters[fnName] = this[fnName];
      return this[fnName] = function() {};
    };

    Emitter.prototype._enableEmitter = function(fnName) {
      var fn;
      fn = this._disabledEmitters[fnName];
      if (fn == null) {
        throw Error(fnName + " is not a disabled emitter");
      }
      this[fnName] = fn;
      return delete this._disabledEmitters[fnName];
    };

    return Emitter;

  })();

}).call(this);
